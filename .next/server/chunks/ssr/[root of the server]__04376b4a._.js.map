{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/USER/splash/app/dapp/components/dashboard-layout.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const DashboardLayout = registerClientReference(\n    function() { throw new Error(\"Attempted to call DashboardLayout() from the server but DashboardLayout is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dapp/components/dashboard-layout.tsx <module evaluation>\",\n    \"DashboardLayout\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,kBAAkB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,0EACA","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/USER/splash/app/dapp/components/dashboard-layout.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const DashboardLayout = registerClientReference(\n    function() { throw new Error(\"Attempted to call DashboardLayout() from the server but DashboardLayout is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dapp/components/dashboard-layout.tsx\",\n    \"DashboardLayout\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,kBAAkB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,sDACA","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/USER/splash/app/dapp/layout.tsx"],"sourcesContent":["import type React from \"react\"\r\nimport type { Metadata } from \"next\"\r\nimport { Inter } from \"next/font/google\"\r\nimport { WagmiConfig, createConfig } from \"wagmi\"\r\nimport { mainnet, optimism, arbitrum } from \"wagmi/chains\"\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\"\r\nimport { RainbowKitProvider, getDefaultWallets, connectorsForWallets, darkTheme } from \"@rainbow-me/rainbowkit\"\r\nimport \"@rainbow-me/rainbowkit/styles.css\"\r\nimport \"../globals.css\"\r\nimport { DashboardLayout } from \"./components/dashboard-layout\"\r\n\r\nconst inter = Inter({ subsets: [\"latin\"] })\r\n\r\n// Configure chains & providers\r\nconst { wallets } = getDefaultWallets({\r\n  appName: \"KolamProsper dApp\",\r\n  projectId: \"YOUR_WALLETCONNECT_PROJECT_ID\", // Replace with your WalletConnect project ID\r\n})\r\n\r\nconst connectors = connectorsForWallets(wallets)\r\n\r\nconst wagmiConfig = createConfig({\r\n  connectors,\r\n  chains: [mainnet, optimism, arbitrum],\r\n})\r\n\r\nconst queryClient = new QueryClient()\r\n\r\nexport const metadata: Metadata = {\r\n  title: \"KolamProsper dApp\",\r\n  description: \"Tokenized T-bonds and property deeds with secure staking and non-liquidating loan options\",\r\n}\r\n\r\nexport default function DAppLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode\r\n}) {\r\n  return (\r\n    <html lang=\"en\" suppressHydrationWarning>\r\n      <body className={inter.className}>\r\n        <QueryClientProvider client={queryClient}>\r\n          <WagmiConfig config={wagmiConfig}>\r\n            <RainbowKitProvider\r\n              theme={darkTheme({\r\n                accentColor: \"#FF6B00\", // Orange accent color to match your brand\r\n                accentColorForeground: \"white\",\r\n                borderRadius: \"medium\",\r\n                fontStack: \"system\",\r\n              })}\r\n              chains={[mainnet, optimism, arbitrum]}\r\n            >\r\n              <div className=\"min-h-screen bg-gradient-to-b from-black to-gray-900 text-white\">\r\n                <DashboardLayout>{children}</DashboardLayout>\r\n              </div>\r\n            </RainbowKitProvider>\r\n          </WagmiConfig>\r\n        </QueryClientProvider>\r\n      </body>\r\n    </html>\r\n  )\r\n}\r\n\r\n"],"names":[],"mappings":";;;;;;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;;;;;;;;;;AAIA,+BAA+B;AAC/B,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,8JAAA,CAAA,oBAAiB,AAAD,EAAE;IACpC,SAAS;IACT,WAAW;AACb;AAEA,MAAM,aAAa,CAAA,GAAA,8JAAA,CAAA,uBAAoB,AAAD,EAAE;AAExC,MAAM,cAAc,CAAA,GAAA,8JAAA,CAAA,eAAY,AAAD,EAAE;IAC/B;IACA,QAAQ;QAAC,gKAAA,CAAA,UAAO;QAAE,iKAAA,CAAA,WAAQ;QAAE,iKAAA,CAAA,WAAQ;KAAC;AACvC;AAEA,MAAM,cAAc,IAAI,6KAAA,CAAA,cAAW;AAE5B,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGT;IACC,qBACE,8OAAC;QAAK,MAAK;QAAK,wBAAwB;kBACtC,cAAA,8OAAC;YAAK,WAAW,yIAAA,CAAA,UAAK,CAAC,SAAS;sBAC9B,cAAA,8OAAC,sLAAA,CAAA,sBAAmB;gBAAC,QAAQ;0BAC3B,cAAA,8OAAC,+LAAA,CAAA,cAAW;oBAAC,QAAQ;8BACnB,cAAA,8OAAC,8JAAA,CAAA,qBAAkB;wBACjB,OAAO,CAAA,GAAA,8JAAA,CAAA,YAAS,AAAD,EAAE;4BACf,aAAa;4BACb,uBAAuB;4BACvB,cAAc;4BACd,WAAW;wBACb;wBACA,QAAQ;4BAAC,gKAAA,CAAA,UAAO;4BAAE,iKAAA,CAAA,WAAQ;4BAAE,iKAAA,CAAA,WAAQ;yBAAC;kCAErC,cAAA,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC,iJAAA,CAAA,kBAAe;0CAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQlC","debugId":null}}]
}